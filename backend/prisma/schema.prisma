// prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ---------- Enums ----------
enum Role {
  ADMIN
  CLIENTE
}

enum OrderStatus {
  RECIBIDO
  EN_CAMINO
  ENTREGADO
  CANCELADO
}

// ---------- Modelos ----------
model User {
  id        Int       @id @default(autoincrement())
  email     String    @unique
  password  String
  name      String
  phone     String    @default("0000000000")
  role      Role      @default(CLIENTE)
  orders    Order[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  addresses  Address[]   // <— relación 1:* 
}

model Order {
  id        Int          @id @default(autoincrement())
  userId    Int
  total     Float
  createdAt DateTime     @default(now())
  user      User         @relation(fields: [userId], references: [id])
  items     OrderItem[]

  // nuevo campo
  status    OrderStatus  @default(RECIBIDO)
}

model Product {
  id          Int         @id @default(autoincrement())
  name        String
  price       Int
  stock       Int
  description String
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  orderItems  OrderItem[]
}

model OrderItem {
  id        Int      @id @default(autoincrement())
  orderId   Int
  productId Int
  quantity  Int

  order   Order   @relation(fields: [orderId], references: [id])
  product Product @relation(fields: [productId], references: [id])
}

model Address {
  id          Int      @id @default(autoincrement())
  userId      Int
  label       String   // Casa, Hotel, Trabajo
  recipient   String   // A nombre de
  phone       String
  line1       String   // Calle/No
  line2       String?  // Apto/Habitación
  neighborhood String? // Barrio
  city        String   @default("Villa de Leyva")
  state       String   @default("Boyacá")
  country     String   @default("CO")
  lat         Float?
  lng         Float?
  notes       String?
  isDefault   Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user User @relation(fields: [userId], references: [id])
}